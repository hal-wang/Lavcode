<UserControl x:Class="Lavcode.Uwp.Modules.PasswordCore.PasswordList"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:lumpi="using:Lavcode.Uwp.Modules.PasswordCore.IconCtl"
             xmlns:local="using:Lavcode.Uwp.Modules.PasswordCore"
             xmlns:muxc="using:Windows.UI.Xaml.Controls"
             mc:Ignorable="d"
             d:DesignWidth="400">

    <UserControl.Resources>
        <Style TargetType="muxc:Button" BasedOn="{StaticResource LightButtonStyle}"
               x:Key="CmdBtnStyle">
            <Setter Property="HorizontalAlignment" Value="Stretch" />
            <Setter Property="VerticalAlignment" Value="Stretch" />
            <Setter Property="Margin" Value="0" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="Background" Value="Transparent" />
        </Style>
    </UserControl.Resources>


    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="1"/>
            <RowDefinition Height="40"/>
        </Grid.RowDefinitions>

        <Border HorizontalAlignment="Right"
                VerticalAlignment="Top"
                Height="0"
                Width="0"
                Opacity="0"
                Margin="0 30 20 0"
                x:Name="PasswordItemPosition"/>

        <ListView ItemsSource="{x:Bind VM.PasswordItems}"
                  SelectedItem="{x:Bind VM.SelectedPasswordItem,Mode=OneWay}"
                  IsItemClickEnabled="{Binding ElementName=PasswordListCommandBar,Path=IsMultiSelect,Mode=OneWay,Converter={StaticResource BooleanConverter},ConverterParameter=true}"
                  CanDragItems="True"
                  DragItemsStarting="PasswordListView_DragItemsStarting"
                  Drop="PasswordListView_Drop"
                  AllowDrop="True"
                  DragOver="PasswordListView_DragOver"
                  CanReorderItems="True"
                  SelectionMode="{Binding ElementName=PasswordListCommandBar,Path=IsMultiSelect,Mode=OneWay,Converter={StaticResource BooleanToValueConverter},ConverterParameter=Multiple:Single}"
                  DragItemsCompleted="ListView_DragItemsCompleted"
                  ItemClick="ListView_ItemClick"
                  SelectionChanged="PasswordListView_SelectionChanged"
                  IsMultiSelectCheckBoxEnabled="False"
                  x:Name="PasswordListView">
            <ListView.ItemTemplate>
                <DataTemplate x:DataType="local:PasswordItem">
                    <Grid Margin="10 2"
                          Height="60">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <lumpi:IconControl Width="46"
                                                Height="46"
                                                Background="{ThemeResource PrimaryAcrylicBrush}"
                                           Icon="{x:Bind Icon,Mode=OneWay}"/>
                        <Grid Grid.Column="1"
                              Margin="14 0 0 0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="auto"/>
                            </Grid.RowDefinitions>
                            <TextBlock Text="{x:Bind Title,Mode=OneWay,Converter={StaticResource IsStrEmptyToValueConverter},ConverterParameter=无标题:@Value}"
                                       TextWrapping="NoWrap"
                                       TextTrimming="CharacterEllipsis"
                                       VerticalAlignment="Center"
                                       FontSize="16"
                                       Grid.RowSpan="{x:Bind Remark,Mode=OneWay,Converter={StaticResource IsStrEmptyToValueConverter},ConverterParameter=2:1}"/>
                            <TextBlock Text="{x:Bind Remark,Mode=OneWay}"
                                       FontSize="12.6"
                                       Visibility="{x:Bind Remark,Mode=OneWay,Converter={StaticResource IsStrEmptyConverter},ConverterParameter=true}"
                                       MinHeight="24"
                                       Grid.Row="1"
                                       Opacity="0.6"
                                       VerticalAlignment="Center"
                                       TextWrapping="Wrap"
                                       MaxLines="2"
                                       TextTrimming="CharacterEllipsis"/>
                        </Grid>
                    </Grid>
                </DataTemplate>
            </ListView.ItemTemplate>
            <ListView.ItemContainerStyle>
                <Style TargetType="ListViewItem">
                    <Setter Property="VerticalContentAlignment" Value="Stretch" />
                    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                    <Setter Property="Padding" Value="0" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ListViewItem">
                                <ListViewItemPresenter x:Name="Root"
                                                       CheckBrush="{ThemeResource ListViewItemCheckBrush}"
                                                       ContentMargin="{TemplateBinding Padding}"
                                                       CheckBoxBrush="{ThemeResource ListViewItemCheckBoxBrush}"
                                                       ContentTransitions="{TemplateBinding ContentTransitions}"
                                                       CheckMode="{ThemeResource ListViewItemCheckMode}"
                                                       DragOpacity="{ThemeResource ListViewItemDragThemeOpacity}"
                                                       DisabledOpacity="{ThemeResource ListViewItemDisabledThemeOpacity}"
                                                       DragBackground="{ThemeResource ListViewItemDragBackground}"
                                                       DragForeground="{ThemeResource ListViewItemDragForeground}"
                                                       FocusVisualSecondaryBrush="{TemplateBinding FocusVisualSecondaryBrush}"
                                                       FocusVisualPrimaryThickness="{TemplateBinding FocusVisualPrimaryThickness}"
                                                       FocusVisualSecondaryThickness="{TemplateBinding FocusVisualSecondaryThickness}"
                                                       FocusBorderBrush="{ThemeResource ListViewItemFocusBorderBrush}"
                                                       FocusVisualMargin="{TemplateBinding FocusVisualMargin}"
                                                       FocusVisualPrimaryBrush="{TemplateBinding FocusVisualPrimaryBrush}"
                                                       FocusSecondaryBorderBrush="{ThemeResource ListViewItemFocusSecondaryBorderBrush}"
                                                       HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                       Control.IsTemplateFocusTarget="True"
                                                       PointerOverBackground="{ThemeResource SystemAccentBrush2}"
                                                       PressedBackground="{ThemeResource SystemAccentBrush3}"
                                                       PlaceholderBackground="{ThemeResource ListViewItemPlaceholderBackground}"
                                                       PointerOverForeground="{ThemeResource ListViewItemForegroundPointerOver}"
                                                       RevealBorderThickness="{ThemeResource ListViewItemRevealBorderThemeThickness}"
                                                       ReorderHintOffset="{ThemeResource ListViewItemReorderHintThemeOffset}"
                                                       RevealBorderBrush="{ThemeResource ListViewItemRevealBorderBrush}"
                                                       RevealBackground="{ThemeResource ListViewItemRevealBackground}"
                                                       SelectedForeground="{ThemeResource ListViewItemForegroundSelected}"
                                                       SelectionCheckMarkVisualEnabled="{ThemeResource ListViewItemSelectionCheckMarkVisualEnabled}"
                                                       SelectedBackground="{ThemeResource SystemAccentBrush3}"
                                                       SelectedPointerOverBackground="{ThemeResource SystemAccentBrush4}"
                                                       SelectedPressedBackground="{ThemeResource SystemAccentBrush5}"
                                                       VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <VisualStateManager.VisualStateGroups>
                                        <VisualStateGroup x:Name="CommonStates">
                                            <VisualState x:Name="Normal"/>
                                            <VisualState x:Name="Selected"/>
                                            <VisualState x:Name="PointerOver">
                                                <VisualState.Setters>
                                                    <Setter Target="Root.(RevealBrush.State)" Value="PointerOver"/>
                                                </VisualState.Setters>
                                            </VisualState>
                                            <VisualState x:Name="PointerOverSelected">
                                                <VisualState.Setters>
                                                    <Setter Target="Root.(RevealBrush.State)" Value="PointerOver"/>
                                                </VisualState.Setters>
                                            </VisualState>
                                            <VisualState x:Name="PointerOverPressed">
                                                <VisualState.Setters>
                                                    <Setter Target="Root.(RevealBrush.State)" Value="Pressed"/>
                                                </VisualState.Setters>
                                            </VisualState>
                                            <VisualState x:Name="Pressed">
                                                <VisualState.Setters>
                                                    <Setter Target="Root.(RevealBrush.State)" Value="Pressed"/>
                                                </VisualState.Setters>
                                            </VisualState>
                                            <VisualState x:Name="PressedSelected">
                                                <VisualState.Setters>
                                                    <Setter Target="Root.(RevealBrush.State)" Value="Pressed"/>
                                                </VisualState.Setters>
                                            </VisualState>
                                        </VisualStateGroup>
                                        <VisualStateGroup x:Name="DisabledStates">
                                            <VisualState x:Name="Enabled"/>
                                            <VisualState x:Name="Disabled">
                                                <VisualState.Setters>
                                                    <Setter Target="Root.RevealBorderThickness" Value="0"/>
                                                </VisualState.Setters>
                                            </VisualState>
                                        </VisualStateGroup>
                                    </VisualStateManager.VisualStateGroups>
                                </ListViewItemPresenter>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </ListView.ItemContainerStyle>
            <ListView.ContextFlyout>
                <MenuFlyout Opened="MenuFlyout_Opened">
                    <MenuFlyoutItem Text="添加"
                                    Click="{x:Bind VM.OnAddNew}">
                        <MenuFlyoutItem.Icon>
                            <SymbolIcon Symbol="Add"/>
                        </MenuFlyoutItem.Icon>
                    </MenuFlyoutItem>
                    <MenuFlyoutItem Text="移动"
                                    Click="MoveTo_Click">
                        <MenuFlyoutItem.Icon>
                            <SymbolIcon Symbol="MoveToFolder"/>
                        </MenuFlyoutItem.Icon>
                    </MenuFlyoutItem>
                    <MenuFlyoutSeparator/>
                    <MenuFlyoutItem Text="删除"
                                    Foreground="Red"
                                    Click="Delete_Click">
                        <MenuFlyoutItem.Icon>
                            <SymbolIcon Symbol="Delete"/>
                        </MenuFlyoutItem.Icon>
                    </MenuFlyoutItem>
                </MenuFlyout>
            </ListView.ContextFlyout>
        </ListView>

        <Border HorizontalAlignment="Left"
                VerticalAlignment="Top"
                Grid.Row="1"
                Height="0"
                Width="0"
                Opacity="0"
                Margin="20 0 0 0"
                x:Name="EditBtnPosition"/>

        <local:PasswordListCommandBar Grid.Row="2" x:Name="PasswordListCommandBar" IsSelectAll="{x:Bind VM.IsSelectAll,Mode=OneWay}"
                                      IsItemSelected="{x:Bind VM.SelectedItems.Count,Mode=OneWay,Converter={StaticResource NumCompareConverter},ConverterParameter=>0}"
                                      OnSelectAll="CB_OnSelectAll"
                                      OnMoveTo="{x:Bind VM.OnMoveTo}"
                                      OnAdd="{x:Bind VM.OnAddNew}"
                                      OnDelete="{x:Bind VM.OnDeleteItems}"/>
    </Grid>
</UserControl>